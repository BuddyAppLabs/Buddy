name: Dev AppStore

on:
  push:
    branches:
      - devx

permissions:
  contents: write

env:
  TAG: ${{ github.sha }}
  SCHEME: GitOK
  DESTINATION: 'generic/platform=macOS'
  ArchivePath: './myapp'
  BuildPath: './temp'
  BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      # https://docs.github.com/zh/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate and provisioning profile
        env:
          P12_PASSWORD: ${{ secrets.BUILD_CERTIFICATE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64_GITOK_MACOS }}
          KEYCHAIN_PASSWORD: 'xxx'
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "${{ env.BUILD_CERTIFICATE_BASE64 }}" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - run: security find-identity -v
      - name: Build
        run: xcodebuild -scheme ${{ env.SCHEME }} -configuration Release -derivedDataPath ${{ env.BuildPath }} clean build
      - name: Codesign
        run: |
          codesign --force --option=runtime -s Y6HZ9JJYV6 temp/Build/Products/Release/${{ env.SCHEME }}.app
          codesign -dv temp/Build/Products/Release/${{ env.SCHEME }}.app
      - name: Create DMG
        run: |
          npm i -g create-dmg
          create-dmg "temp/Build/Products/Release/${{ env.SCHEME }}.app"
      - name: 生成 App Store Connect API 的 AuthKey
        run: |
          mkdir -p ./private_keys
          echo -n "${{ secrets.APP_STORE_CONNECT_KEY_BASE64 }}" | base64 --decode -o ./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8
      - name: Archive
        run: |
          echo ${{ env.ArchivePath }}
          xcodebuild archive \
            -scheme ${{ env.SCHEME }} \
            -configuration Release \
            -archivePath ${{ env.ArchivePath }} \
            -destination ${{ env.DESTINATION }}
    #   - name: Export Archive
    #     env:
    #       APPSTORE_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
    #       APPSTORE_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }}
    #     run: |
    #       xcodebuild -exportArchive \
    #         -archivePath ci/myapp.xcarchive \
    #         -exportOptionsPlist .github/exportOptions.plist \
    #         -exportPath ci/pkg \
    #         -destination ${{ env.DESTINATION }} \
    #         -allowProvisioningUpdates \
    #         -authenticationKeyPath $(pwd)/private_keys/AuthKey_$APPSTORE_API_KEY_ID.p8 \
    #         -authenticationKeyID $APPSTORE_API_KEY_ID \
    #         -authenticationKeyIssuerID $APPSTORE_API_ISSUER_ID
    #   - name: 上传到 App Store
    #     env:
    #       APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
    #       APPSTORE_API_ISSUER_ID: ${{ secrets.APPSTORE_API_ISSUER_ID }}
    #     run: |
    #         # 执行 xcrun altool -h 查看文档得知：私钥文件 AuthKey_<api_key>.p8 放在 ./private_keys 目录，会自动使用
    #         xcrun altool --upload-app \
    #           --type macos \
    #           -f ci/pkg/快易知.pkg \
    #           --apiKey $APPSTORE_API_KEY_ID \
    #           --apiIssuer $APPSTORE_API_ISSUER_ID
