name: Pre Release

on:
  push:
    branches:
      - pre

permissions:
  contents: write

env:
  TAG: ${{ github.sha }}
  Identity: ''
  SCHEME: GitOK
  DESTINATION: 'generic/platform=macOS'
  ArchivePath: './myapp'
  BuildPath: './temp'
  BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  NEW_VERSION: 'x.x.x'

jobs:
  bump:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 更新版本号
        run: |
          # 读取当前版本号
          VERSION=$(grep "version:" pubspec.yaml | sed 's/version: //' | tr -d "'")
          # 分割版本号
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          # 增加补丁版本号
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          # 更新 pubspec.yaml 中的版本号
          sed -i '' "s/version: .*/version: $NEW_VERSION/" pubspec.yaml
          echo "TAG=p$NEW_VERSION" >> $GITHUB_ENV
      - name: 打标签并推送到仓库
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: '🎨 Bump version to ${{ env.TAG }}'
          commit_user_name: GitHub Action
          tagging_message: ${{ env.TAG }}
  rebase:
    needs:
      - bump
    runs-on: ubuntu-latest
    steps:
      - name: 拉取 dev 分支
        uses: actions/checkout@v3
        with:
          ref: dev
      - name: 拉取 pre 分支
        run: git fetch origin pre
      - name: Rebase dev on pre
        continue-on-error: true
        run: git rebase origin/pre
      - name: Push the rebased dev branch
        continue-on-error: true
        run: git push origin dev

  build_with_signing:
    needs:
      - bump
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: pre
          fetch-depth: 0

      - name: 读取版本号
        run: |
          # 从 pubspec.yaml 读取版本号
          VERSION=$(grep "version:" pubspec.yaml | sed 's/version: //' | tr -d "'")
          echo "版本号->$VERSION"
          echo "TAG=p$VERSION" >> $GITHUB_ENV

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      # https://docs.github.com/zh/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate and provisioning profile
        env:
          P12_PASSWORD: ${{ secrets.BUILD_CERTIFICATE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64_GITOK_MACOS }}
          KEYCHAIN_PASSWORD: 'xxx'
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "${{ env.BUILD_CERTIFICATE_BASE64 }}" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: 生成 App Store Connect API 的 AuthKey
        run: |
          mkdir -p ./private_keys
          echo -n "${{ secrets.APP_STORE_CONNECT_KEY_BASE64 }}" | base64 --decode -o ./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8
      - run: security find-identity -v
      - name: Build macOS App
        run: |
          flutter config --enable-macos-desktop
          # 首先生成 Xcode 项目文件
          flutter build macos --debug || true
          # 使用 xcodebuild 进行构建，明确指定签名设置
          cd macos
          xcodebuild -scheme Runner -configuration Release \
            CODE_SIGN_STYLE=Manual \
            BUILD_DIR=build
      - name: find identity
        run: |
          i=$(security find-identity -v -p codesigning | grep '^[[:space:]]*1)' | awk -F'[(|)]' '{print $3}')
          echo "Identity=$i" >> $GITHUB_ENV
      - name: Codesign
        run: codesign --force -s ${{ env.Identity }} --option=runtime build/Release/*.app
      - name: Codesign Check
        run: codesign -dv build/Release/*.app
      - name: Create DMG
        run: |
          npm i -g create-dmg
          create-dmg "build/Release/*.app"
      - name: Notary
        continue-on-error: true
        run: |
          file=$(find . -maxdepth 1 -type f -name "*.dmg" | head -n 1)
          xcrun notarytool submit "$file" \
            --key ./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8 \
            --key-id=${{ secrets.APP_STORE_CONNECT_KEY_ID }} \
            --issuer ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }} \
            --wait \
            --timeout 10m
          stapler staple "$file"

          # 如果出现错误，查询日志
          # xcrun notarytool log f66d58e3-d03a-4202-937e-5fca4e7cea83 
          #   --key ./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8 \
          #   --key-id ${{ secrets.APP_STORE_CONNECT_KEY_ID }} \
          #   --issuer ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }}
      - name: 公证结果
        continue-on-error: true
        run: |
          file=$(find . -maxdepth 1 -type f -name "*.dmg" | head -n 1)
          stapler validate "$file"
      # - name: Generate Changelog
      #   run: echo ""> ${{ github.workspace }}-CHANGELOG.txt
      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          # body_path: ${{ github.workspace }}-CHANGELOG.txt
          prerelease: true
          files: |
            ./**/*.dmg
