name: Pre Release

on:
  push:
    branches:
      - pre

permissions:
  contents: write

env:
  TAG: ${{ github.sha }}
  Identity: ''
  BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  NEW_VERSION: 'x.x.x'
  TEAM_ID: ''
  CERT_ID: ''
  ED_SIGNATURE: ''
  DMG_FILENAME: ''
  VERSION: ''
  DMG_FILE: ''
  APP_PATH: ''
  UPDATE_WORKSPACE_PATH: ''

jobs:
  bump:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Êõ¥Êñ∞ÁâàÊú¨Âè∑
        run: |
          # ËØªÂèñÂΩìÂâçÁâàÊú¨Âè∑
          VERSION=$(grep "version:" pubspec.yaml | sed 's/version: //' | tr -d "'")
          # ÂàÜÂâ≤ÁâàÊú¨Âè∑
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          # Â¢ûÂä†Ë°•‰∏ÅÁâàÊú¨Âè∑
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          # Êõ¥Êñ∞ pubspec.yaml ‰∏≠ÁöÑÁâàÊú¨Âè∑
          sed -i '' "s/version: .*/version: $NEW_VERSION/" pubspec.yaml
          echo "TAG=$NEW_VERSION" >> $GITHUB_ENV
      - name: ÊâìÊ†áÁ≠æÂπ∂Êé®ÈÄÅÂà∞‰ªìÂ∫ì
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'üé® Bump version to ${{ env.TAG }}'
          commit_user_name: GitHub Action
          tagging_message: ${{ env.TAG }}

  rebase:
    needs:
      - bump
    runs-on: ubuntu-latest
    steps:
      - name: ÊãâÂèñ dev ÂàÜÊîØ
        uses: actions/checkout@v3
        with:
          ref: dev
      - name: ÊãâÂèñ pre ÂàÜÊîØ
        run: git fetch origin pre
      - name: Rebase dev on pre
        continue-on-error: true
        run: git rebase origin/pre
      - name: Push the rebased dev branch
        continue-on-error: true
        run: git push origin dev

  build_with_signing:
    needs:
      - bump
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: pre
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      # https://docs.github.com/zh/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate and provisioning profile
        env:
          P12_PASSWORD: ${{ secrets.BUILD_CERTIFICATE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64_GITOK_MACOS }}
          KEYCHAIN_PASSWORD: 'xxx'
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "${{ env.BUILD_CERTIFICATE_BASE64 }}" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: ÁîüÊàê App Store Connect API ÁöÑ AuthKey
        run: |
          mkdir -p ./private_keys
          echo -n "${{ secrets.APP_STORE_CONNECT_KEY_BASE64 }}" | base64 --decode -o ./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8

      - name: Get Certificate Info
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning | grep '^[[:space:]]*1)' | head -n 1)
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          TEAM_ID=$(echo "$CERT_INFO" | grep -o '[A-Z0-9]\{10\}' | tail -n 1)
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV

      - name: Configure Xcode project
        run: |
          # ‰øÆÊîπÊâÄÊúâÁ≠æÂêçÁõ∏ÂÖ≥ÁöÑÈÖçÁΩÆ
          PBXPROJ="macos/Runner.xcodeproj/project.pbxproj"

          # ÊõøÊç¢ÊâÄÊúâ Mac Development ‰∏∫ÂÆûÈôÖÁöÑËØÅ‰π¶ ID
          sed -i '' "s/\"Mac Development\"/\"${{ env.CERT_ID }}\"/g" $PBXPROJ

          # ÊõøÊç¢ÊâÄÊúâ DEVELOPMENT_TEAM
          sed -i '' "s/DEVELOPMENT_TEAM = \".*\"/DEVELOPMENT_TEAM = \"${{ env.TEAM_ID }}\"/g" $PBXPROJ

          # ËÆæÁΩÆÊâãÂä®Á≠æÂêç
          sed -i '' 's/CODE_SIGN_STYLE = Automatic/CODE_SIGN_STYLE = Manual/g' $PBXPROJ

          # ËÆæÁΩÆ CODE_SIGN_IDENTITY
          sed -i '' "s/CODE_SIGN_IDENTITY = \".*\"/CODE_SIGN_IDENTITY = \"${{ env.CERT_ID }}\"/g" $PBXPROJ

          # ËÆæÁΩÆ Debug Âíå Release ÈÖçÁΩÆÁöÑÁ≠æÂêçË∫´‰ªΩ
          sed -i '' "s/\"CODE_SIGN_IDENTITY[^\"]*\" = \".*\"/\"CODE_SIGN_IDENTITY[sdk=macosx*]\" = \"${{ env.CERT_ID }}\"/g" $PBXPROJ

          # Ê∏ÖÈô§ÂèØËÉΩÂ≠òÂú®ÁöÑÈÖçÁΩÆÊñá‰ª∂ÊåáÂÆöÂô®
          sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = ".*"/PROVISIONING_PROFILE_SPECIFIER = ""/g' $PBXPROJ

      - name: Build macOS App
        run: flutter build macos --release

      - name: Find identity
        run: |
          i=$(security find-identity -v -p codesigning | grep '^[[:space:]]*1)' | awk -F'[(|)]' '{print $3}')
          echo "Identity=$i" >> $GITHUB_ENV

      - name: Ëé∑ÂèñÂ∫îÁî®Á®ãÂ∫è‰ø°ÊÅØ
        run: |
          APP_PATH=$(find build/macos/Build/Products/Release -type d -name "*.app" | head -n 1)
          APP_NAME=$(basename $APP_PATH)
          VERSION=$(grep "version:" pubspec.yaml | sed 's/version: //' | tr -d "'")

          echo "TAG=$VERSION" >> $GITHUB_ENV
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

          echo "APP_PATH=$APP_PATH"
          echo "APP_NAME=$APP_NAME"
          echo "VERSION=$VERSION"

      # Codesign sparkle
      - name: Codesign sparkle
        run: |
          codesign -f -s ${{ env.Identity }} -o runtime ${{ env.APP_PATH }}/Contents/Frameworks/Sparkle.framework/Versions/B/XPCServices/Installer.xpc
          codesign -f -s ${{ env.Identity }} -o runtime --preserve-metadata=entitlements ${{ env.APP_PATH }}/Contents/Frameworks/Sparkle.framework/Versions/B/XPCServices/Downloader.xpc
          codesign -f -s ${{ env.Identity }} -o runtime ${{ env.APP_PATH }}/Contents/Frameworks/Sparkle.framework/Versions/B/Autoupdate
          codesign -f -s ${{ env.Identity }} -o runtime ${{ env.APP_PATH }}/Contents/Frameworks/Sparkle.framework/Versions/B/Updater.app
          codesign -f -s ${{ env.Identity }} -o runtime ${{ env.APP_PATH }}/Contents/Frameworks/Sparkle.framework

      # Codesign App
      - name: Codesign App
        run: |
          codesign --force -s ${{ env.Identity }} --option=runtime ${{ env.APP_PATH }}
          codesign -dv ${{ env.APP_PATH }}

      # Create DMG
      - name: Create DMG
        run: |
          npm i -g create-dmg
          create-dmg ${{ env.APP_PATH }}

          # ÈáçÂëΩÂêç DMG Êñá‰ª∂ÔºàÁßªÈô§Á©∫Ê†ºÔºâ
          for file in *.dmg; do
            mv "$file" "${file// /-}"
          done

      - name: Ëé∑Âèñ DMG Êñá‰ª∂‰ø°ÊÅØ
        run: |
          # Êü•Êâæ DMG Êñá‰ª∂
          DMG_FILE=$(find . -maxdepth 1 -type f -name "*.dmg" | head -n 1)

          if [ -z "$DMG_FILE" ]; then
            echo "ÈîôËØØ: Êú™ÊâæÂà∞ DMG Êñá‰ª∂" >&2
            exit 1
          fi

          # Ëé∑ÂèñÁªùÂØπË∑ØÂæÑ
          DMG_FILE=$(realpath "$DMG_FILE")

          # Ëé∑ÂèñÊñá‰ª∂Âêç
          DMG_FILENAME=$(basename "$DMG_FILE")

          # ËÆæÁΩÆ GitHub Actions ÁéØÂ¢ÉÂèòÈáè
          echo "DMG_FILE=$DMG_FILE" >> $GITHUB_ENV
          echo "DMG_FILENAME=$DMG_FILENAME" >> $GITHUB_ENV

          echo "DMG Êñá‰ª∂‰ø°ÊÅØÔºö"
          echo "Ë∑ØÂæÑ: $DMG_FILE"
          echo "Êñá‰ª∂Âêç: $DMG_FILENAME"

      - name: Notary
        continue-on-error: true
        run: |
          file=${{ env.DMG_FILE }}
          xcrun notarytool submit "$file" \
            --key ./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8 \
            --key-id=${{ secrets.APP_STORE_CONNECT_KEY_ID }} \
            --issuer ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }} \
            --wait \
            --timeout 10m
          stapler staple "$file"

          # Â¶ÇÊûúÂá∫Áé∞ÈîôËØØÔºåÊü•ËØ¢Êó•Âøó
          # xcrun notarytool log f66d58e3-d03a-4202-937e-5fca4e7cea83 
          #   --key ./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8 \
          #   --key-id ${{ secrets.APP_STORE_CONNECT_KEY_ID }} \
          #   --issuer ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }}

      - name: Validate
        continue-on-error: true
        run: stapler validate "${{ env.DMG_FILE }}"

      - name: Generate appcast
        run: |
          UPDATE_WORKSPACE_PATH=${{ github.workspace }}/updates

          mkdir $UPDATE_WORKSPACE_PATH
          cp *.dmg $UPDATE_WORKSPACE_PATH/

          ls -alh $UPDATE_WORKSPACE_PATH

          GENERATE_APPCAST_PATH=$(find ${{ github.workspace }} -name "generate_appcast" -type f | head -n 1)

          if [ -z "$GENERATE_APPCAST_PATH" ]; then
            echo "generate_appcast Â∑•ÂÖ∑Êú™ÊâæÂà∞"
            exit 1
          fi

          echo "${{ secrets.SPARKLE_PRIVATE_KEY_GITOK }}" | $GENERATE_APPCAST_PATH --ed-key-file - $UPDATE_WORKSPACE_PATH

          cat $UPDATE_WORKSPACE_PATH/appcast.xml

          u="https://github.com/CofficLab/GitOK/releases/latest/download/${{ env.DMG_FILENAME }}" 
          sed -i '' "s|\(enclosure url=\"\)[^\"]*|\1$u|" "$UPDATE_WORKSPACE_PATH/appcast.xml"

          mv $UPDATE_WORKSPACE_PATH/appcast.xml ${{ github.workspace }}/appcast.xml

          echo "UPDATE_WORKSPACE_PATH=$UPDATE_WORKSPACE_PATH" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          prerelease: true
          files: |
            ${{ env.UPDATE_WORKSPACE_PATH }}/*.dmg

      - name: Êé®ÈÄÅÂà∞‰ªìÂ∫ì
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: pre
          commit_message: 'üé® Update appcast.yml'
          commit_user_name: GitHub Action
          file_pattern: 'appcast.xml'
