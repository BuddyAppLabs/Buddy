name: Publish Pre-release Buddy

on:
  workflow_run:
    workflows: ['Buddy Bump Version']
    types:
      - completed
  push:
    branches:
      - electron

permissions:
  contents: write

jobs:
  release:
    # 只有当被依赖的工作流成功完成时才运行
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install node-gyp
        run: npm install -g node-gyp

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install Dependencies
        run: pnpm install

      # - name: build-linux
      #   if: matrix.os == 'ubuntu-latest'
      #   run: cd buddy && pnpm run build:linux

      # macOS 构建和签名
      - name: Setup macOS signing
        id: signing
        if: matrix.os == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          BUILD_CERTIFICATE_P12_PASSWORD: ${{ secrets.BUILD_CERTIFICATE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64_GITOK_MACOS }}
          APP_STORE_CONNECT_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_KEY_BASE64 }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_KEY_ISSER_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }}
        run: |
          chmod +x ./scripts/setup-macos-signing.sh
          source ./scripts/setup-macos-signing.sh
          echo "signing_identity=$SIGNING_IDENTITY" >> $GITHUB_OUTPUT
          echo "team_id=$TEAM_ID" >> $GITHUB_OUTPUT
          echo "pp_path=$PP_PATH" >> $GITHUB_OUTPUT
          echo "api_key_path=$API_KEY_PATH" >> $GITHUB_OUTPUT

      - name: Update electron-builder config for CI
        if: matrix.os == 'macos-latest'
        env:
          PP_PATH: ${{ steps.signing.outputs.pp_path }}
          TEAM_ID: ${{ steps.signing.outputs.team_id }}
          SIGNING_IDENTITY: ${{ steps.signing.outputs.signing_identity }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_KEY_ISSER_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }}
        run: |
          brew install yq
          cd buddy

          # 删除identity: null配置
          yq -i 'del(.mac.identity)' electron-builder.yml

          # 只保留 notarize: true
          yq -i '.mac.notarize = true' electron-builder.yml

          echo "electron-builder.yml 配置完成:"
          cat electron-builder.yml

      - name: build-mac
        if: matrix.os == 'macos-latest'
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: true
          CSC_NAME: ${{ steps.signing.outputs.signing_identity }}
          APPLE_TEAM_ID: ${{ steps.signing.outputs.team_id }}
          APPLE_API_KEY: ${{ steps.signing.outputs.api_key_path }}
          APPLE_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }}
          PYTHON: python3.11
        run: node scripts/build.mjs buddy:mac

      # - name: build-win
      #   if: matrix.os == 'windows-latest'
      #   run: cd buddy && pnpm run build:win

      - name: Get Version
        id: get_version
        if: matrix.os == 'macos-latest'
        run: |
          cd buddy
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          # 检查是否为预发布版本
          if [[ "$VERSION" == *"-beta"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: release
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'macos-latest'
        with:
          draft: false
          prerelease: ${{ steps.get_version.outputs.prerelease }}
          files: |
            buddy/dist/*.exe
            buddy/dist/*.zip
            buddy/dist/*.dmg
            buddy/dist/*.AppImage
            buddy/dist/*.snap
            buddy/dist/*.deb
            buddy/dist/*.rpm
            buddy/dist/*.tar.gz
            buddy/dist/*.yml
            buddy/dist/*.blockmap
