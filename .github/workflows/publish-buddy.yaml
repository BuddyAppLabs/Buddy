name: Buddy Build and Release

on:
  push:
    branches:
      - pre
      - main
    paths:
      - 'buddy/**'
      - '.github/workflows/publish-buddy.yaml'

permissions:
  contents: write

env:
  RELEASE_BRANCHES: main,release

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 升级版本号
        id: bump
        run: |
          cd buddy
          # 读取当前版本号
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "当前版本: $CURRENT_VERSION"

          # 分割版本号，处理可能存在的预发布后缀
          BASE_VERSION=$(echo $CURRENT_VERSION | cut -d'-' -f1)
          PRERELEASE_SUFFIX=$(echo $CURRENT_VERSION | grep -o '\-.*' || echo "")

          echo "基础版本: $BASE_VERSION"

          # 分割基础版本号
          MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
          MINOR=$(echo $BASE_VERSION | cut -d. -f2)
          PATCH=$(echo $BASE_VERSION | cut -d. -f3)

          # 获取当前分支名
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "当前分支: $BRANCH_NAME"

          # 检查是否在发布分支列表中
          if [[ ",$RELEASE_BRANCHES," == *",$BRANCH_NAME,"* ]]; then
            # 在发布分支中，生成正式版本号
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          else
            # 在其他分支，生成预发布版本号
            # 检查是否已经有beta后缀
            if [[ "$PRERELEASE_SUFFIX" == *"beta"* ]]; then
              # 提取beta版本号并增加
              BETA_VERSION=$(echo $PRERELEASE_SUFFIX | grep -o '[0-9]*$')
              NEW_BETA=$((BETA_VERSION + 1))
              # 使用原来的补丁版本号，只增加 beta 号
              NEW_VERSION="$MAJOR.$MINOR.$PATCH-beta.$NEW_BETA"
            else
              # 添加新的beta后缀
              NEW_VERSION="$MAJOR.$MINOR.$PATCH-beta.0"
            fi
          fi

          echo "新版本: $NEW_VERSION"

          # 验证版本号格式
          if ! [[ $NEW_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-beta\.[0-9]+)?$ ]]; then
            echo "错误: 无效的版本号格式: $NEW_VERSION"
            exit 1
          fi

          # 更新 package.json
          sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json

          # 配置 Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # 提交更改
          git pull
          git add package.json
          git commit -m "🔖 Bump version to $NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push --follow-tags

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          # 检查是否为预发布版本并输出
          if [[ "$NEW_VERSION" == *"-beta"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: 输出结果
        run: |
          echo "✅ 版本号已更新到: v${{ steps.bump.outputs.version }}"

  release:
    runs-on: macos-latest
    needs: bump-version
    steps:
      # 检出代码
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }} # 确保checkout最新的提交，包括bump-version中推送的

      # 导入代码签名证书
      # 它从 GitHub Secrets 中读取加密的 .p12 证书文件和密码，
      # 然后将其安全地安装到 CI 环境的临时钥匙串中，供后续步骤使用。
      - name: Import Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v5
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATES_P12 }}
          p12-password: ${{ secrets.MACOS_CERTIFICATES_P12_PASSWORD }}

      # 设置运行环境
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 23

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install yq
        run: |
          brew install yq
          yq --version

      # 安装项目依赖
      - name: Install Dependencies
        run: pnpm install

      # 准备公证所需的环境变量
      - name: Prepare Notarization Environment
        id: prepare_env
        run: |
          mkdir -p .private_keys
          KEY_PATH="$GITHUB_WORKSPACE/.private_keys/AuthKey.p8"
          echo "${{ secrets.APP_STORE_CONNECT_KEY_BASE64 }}" | base64 --decode > $KEY_PATH
          echo "key_path=$KEY_PATH" >> $GITHUB_OUTPUT

      # 构建和打包 macOS 应用
      # electron-builder 会自动在钥匙串中查找由上一步导入的证书进行签名
      - name: Build and Package macOS App
        id: build
        run: |
          # 删除identity: null配置
          yq -i 'del(.mac.identity)' buddy/electron-builder.yml

          # 只保留 notarize: true
          yq -i '.mac.notarize = true' buddy/electron-builder.yml

          pnpm build:buddy:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: true
          APPLE_API_KEY: ${{ steps.prepare_env.outputs.key_path }}
          APPLE_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }}

      # 获取版本号信息
      # 从 package.json 中读取版本号，并判断是否为预发布版本 (beta)，
      # 以便决定 GitHub Release 的类型。
      - name: Get Version and Release Info
        id: get_version
        run: |
          cd buddy
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ "$VERSION" == *"-beta"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      # 创建 GitHub Release 并上传产物
      # 使用上一步获取的版本号创建 Release，并将构建好的 .dmg, .zip 等文件上传。
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: ${{ steps.get_version.outputs.prerelease }}
          files: |
            buddy/dist/*.dmg
            buddy/dist/*.zip
            buddy/dist/*.yml
            buddy/dist/*.blockmap
