name: Buddy Version Bump and Release

on:
  push:
    branches:
      - pre
      - main
      - fastlane
    paths:
      - 'buddy/**'
      - '.github/workflows/publish-buddy.yaml'

permissions:
  contents: write

# 工作流配置
env:
  # ============================
  # 发布配置
  # ============================
  # 可以发布正式版本的分支列表，用逗号分隔
  # 示例: main,release,stable
  RELEASE_BRANCHES: main,release,fastlane

jobs:
  test-fastlane:
    runs-on: macos-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }} # 确保checkout最新的提交，包括bump-version中推送的

      - name: Setup Ruby and Fastlane
        run: |
          brew install rbenv ruby-build
          rbenv install 3.3.0
          rbenv global 3.3.0
          gem install bundler
          cd buddy
          bundle install

      - name: Setup SSH Agent for Fastlane Match
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}

      - name: Setup macOS signing with Fastlane
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_KEY_ISSER_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }}
          APP_STORE_CONNECT_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_KEY_BASE64 }}
        run: |
          cd buddy
          bundle exec fastlane mac setup_signing

  bump-version:
    runs-on: ubuntu-latest
    needs: test-fastlane
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 升级版本号
        id: bump
        run: |
          cd buddy
          # 读取当前版本号
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "当前版本: $CURRENT_VERSION"

          # 分割版本号，处理可能存在的预发布后缀
          BASE_VERSION=$(echo $CURRENT_VERSION | cut -d'-' -f1)
          PRERELEASE_SUFFIX=$(echo $CURRENT_VERSION | grep -o '\-.*' || echo "")

          echo "基础版本: $BASE_VERSION"

          # 分割基础版本号
          MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
          MINOR=$(echo $BASE_VERSION | cut -d. -f2)
          PATCH=$(echo $BASE_VERSION | cut -d. -f3)

          # 获取当前分支名
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "当前分支: $BRANCH_NAME"

          # 检查是否在发布分支列表中
          if [[ ","$RELEASE_BRANCHES"," == *","$BRANCH_NAME","* ]]; then
            # 在发布分支中，生成正式版本号
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          else
            # 在其他分支，生成预发布版本号
            # 检查是否已经有beta后缀
            if [[ "$PRERELEASE_SUFFIX" == *"beta"* ]]; then
              # 提取beta版本号并增加
              BETA_VERSION=$(echo $PRERELEASE_SUFFIX | grep -o '[0-9]*$')
              NEW_BETA=$((BETA_VERSION + 1))
              # 使用原来的补丁版本号，只增加 beta 号
              NEW_VERSION="$MAJOR.$MINOR.$PATCH-beta.$NEW_BETA"
            else
              # 添加新的beta后缀
              NEW_VERSION="$MAJOR.$MINOR.$PATCH-beta.0"
            fi
          fi

          echo "新版本: $NEW_VERSION"

          # 验证版本号格式
          if ! [[ $NEW_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-beta\.[0-9]+)?$ ]]; then
            echo "错误: 无效的版本号格式: $NEW_VERSION"
            exit 1
          fi

          # 更新 package.json
          sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json

          # 配置 Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # 提交更改
          git pull
          git add package.json
          git commit -m "🔖 Bump version to $NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push --follow-tags

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          # 检查是否为预发布版本并输出
          if [[ "$NEW_VERSION" == *"-beta"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: 输出结果
        run: |
          echo "✅ 版本号已更新到: v${{ steps.bump.outputs.version }}"

  release:
    needs: bump-version
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }} # 确保checkout最新的提交，包括bump-version中推送的

      - name: Setup Ruby and Fastlane
        if: matrix.os == 'macos-latest'
        run: |
          brew install rbenv ruby-build
          rbenv install 3.3.0
          rbenv global 3.3.0
          gem install bundler
          cd buddy
          bundle install

      - name: Setup SSH Agent for Fastlane Match
        if: matrix.os == 'macos-latest'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}

      - name: Setup macOS signing with Fastlane
        if: matrix.os == 'macos-latest'
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_KEY_ISSER_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }}
          APP_STORE_CONNECT_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_KEY_BASE64 }}
        run: |
          cd buddy
          bundle exec fastlane mac setup_signing

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 23

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install node-gyp
        run: npm install -g node-gyp

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install Dependencies
        run: pnpm install

      - name: build-mac
        if: matrix.os == 'macos-latest'
        env:
          # Fastlane match 会自动设置好签名环境
          # electron-builder 会自动发现证书和配置
          CSC_IDENTITY_AUTO_DISCOVERY: true
        run: pnpm build:buddy:mac

      # - name: build-win
      #   if: matrix.os == 'windows-latest'
      #   run: cd buddy && pnpm run build:win

      - name: Get Version
        id: get_version
        if: matrix.os == 'macos-latest'
        run: |
          cd buddy
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          # 检查是否为预发布版本
          if [[ "$VERSION" == *"-beta"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: release
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'macos-latest'
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: ${{ steps.get_version.outputs.prerelease }}
          files: |
            buddy/dist/*.exe
            buddy/dist/*.zip
            buddy/dist/*.dmg
            buddy/dist/*.AppImage
            buddy/dist/*.snap
            buddy/dist/*.deb
            buddy/dist/*.rpm
            buddy/dist/*.tar.gz
            buddy/dist/*.yml
            buddy/dist/*.blockmap
