name: Buddy Build and Release

on:
  push:
    branches:
      - pre
      - main
    paths:
      - 'buddy/**'
      - '.github/workflows/publish-buddy.yaml'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest
    steps:
      # 1. 检出代码
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          # 拉取所有历史记录，以便 git push
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. 设置运行环境
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 23
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
      - name: Install yq
        run: brew install yq

      # 3. 安装依赖
      - name: Install Dependencies
        run: pnpm install

      # 4. 计算并更新版本号
      - name: Calculate and Update Version
        id: version
        run: |
          cd buddy
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          BASE_VERSION=$(echo $CURRENT_VERSION | cut -d'-' -f1)
          PRERELEASE_SUFFIX=$(echo $CURRENT_VERSION | grep -o '\-.*' || echo "")
          MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
          MINOR=$(echo $BASE_VERSION | cut -d. -f2)
          PATCH=$(echo $BASE_VERSION | cut -d. -f3)
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"

          if [[ ",${{ env.RELEASE_BRANCHES }}," == *",$BRANCH_NAME,"* ]]; then
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          else
            if [[ "$PRERELEASE_SUFFIX" == *"beta"* ]]; then
              BETA_VERSION=$(echo $PRERELEASE_SUFFIX | grep -o '[0-9]*$')
              NEW_BETA=$((BETA_VERSION + 1))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH-beta.$NEW_BETA"
            else
              NEW_VERSION="$MAJOR.$MINOR.$PATCH-beta.0"
            fi
          fi

          echo "New version: $NEW_VERSION"

          # 直接在文件中更新版本号，为构建做准备
          # 使用 perl 来兼容 macOS sed
          perl -pi -e "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          if [[ "$NEW_VERSION" == *"-beta"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
        env:
          RELEASE_BRANCHES: main,release

      # 5. 导入代码签名证书
      - name: Import Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v5
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATES_P12 }}
          p12-password: ${{ secrets.MACOS_CERTIFICATES_P12_PASSWORD }}

      # 6. 准备公证所需的环境变量
      - name: Prepare Notarization Environment
        id: prepare_env
        run: |
          mkdir -p .private_keys
          KEY_PATH="$GITHUB_WORKSPACE/.private_keys/AuthKey.p8"
          echo "${{ secrets.APP_STORE_CONNECT_KEY_BASE64 }}" | base64 --decode > $KEY_PATH
          echo "key_path=$KEY_PATH" >> $GITHUB_OUTPUT

      # 7. 构建、签名和公证应用
      - name: Build, Sign, and Notarize macOS App
        run: |
          yq -i 'del(.mac.identity)' buddy/electron-builder.yml
          yq -i '.mac.notarize = true' buddy/electron-builder.yml
          pnpm build:buddy:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: true
          APPLE_API_KEY: ${{ steps.prepare_env.outputs.key_path }}
          APPLE_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APP_STORE_CONNECT_KEY_ISSER_ID }}

      # 8. 提交版本号变更到代码库
      - name: Commit and Push Version Bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add buddy/package.json
          git commit -m "🔖 Bump version to ${{ steps.version.outputs.version }}"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push --follow-tags

      # 9. 创建 GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ steps.version.outputs.prerelease }}
          files: |
            buddy/dist/*.dmg
            buddy/dist/*.zip
            buddy/dist/*.yml
            buddy/dist/*.blockmap
